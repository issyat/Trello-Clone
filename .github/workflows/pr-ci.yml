name: Backend CI/CD Pipeline

on:
  pull_request:
    branches: [dev]
    types: [opened, synchronize, reopened]

env:
  POSTGRES_PASSWORD: postgres
  POSTGRES_USER: postgres
  POSTGRES_DB: trello_db_test
  SECRET_KEY: test-secret-key-for-ci-only-not-production
  DEBUG: 'false'

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: trello_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          venv-${{ runner.os }}-

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        poetry install --with dev

    - name: Wait for PostgreSQL to be ready
      run: |
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "PostgreSQL is ready"
            break
          fi
          echo "Waiting for PostgreSQL... attempt $i"
          sleep 2
        done

    - name: Run Django system checks
      working-directory: ./backend
      env:
        CI: 'true'
        POSTGRES_DB: trello_db_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        SECRET_KEY: ${{ env.SECRET_KEY }}
        DEBUG: ${{ env.DEBUG }}
        ALLOWED_HOSTS: localhost,127.0.0.1,testserver
        DJANGO_SETTINGS_MODULE: trello_backend.test_settings
      run: |
        poetry run python manage.py check --deploy

    - name: Run database migrations
      working-directory: ./backend
      env:
        CI: 'true'
        POSTGRES_DB: trello_db_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        SECRET_KEY: ${{ env.SECRET_KEY }}
        DEBUG: ${{ env.DEBUG }}
        ALLOWED_HOSTS: localhost,127.0.0.1,testserver
        DJANGO_SETTINGS_MODULE: trello_backend.test_settings
      run: |
        poetry run python manage.py migrate --noinput

    - name: Collect static files
      working-directory: ./backend
      env:
        CI: 'true'
        POSTGRES_DB: trello_db_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        SECRET_KEY: ${{ env.SECRET_KEY }}
        DEBUG: ${{ env.DEBUG }}
        ALLOWED_HOSTS: localhost,127.0.0.1,testserver
        DJANGO_SETTINGS_MODULE: trello_backend.test_settings
      run: |
        poetry run python manage.py collectstatic --noinput

    - name: Lint backend code
      working-directory: ./backend
      run: |
        poetry run flake8 apps/ trello_backend/ --max-line-length=88 --extend-ignore=E203,W503
        poetry run black --check apps/ trello_backend/
        poetry run isort --check-only apps/ trello_backend/

    - name: Run backend tests
      working-directory: ./backend
      env:
        CI: 'true'
        POSTGRES_DB: trello_db_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        SECRET_KEY: ${{ env.SECRET_KEY }}
        DEBUG: ${{ env.DEBUG }}
        ALLOWED_HOSTS: localhost,127.0.0.1,testserver
        DJANGO_SETTINGS_MODULE: trello_backend.test_settings
      run: |
        poetry run python manage.py test --verbosity=2

  build-backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: trello-backend:pr-${{ github.event.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  auto-merge:
    name: Auto Merge to Dev
    runs-on: ubuntu-latest
    needs: [test-backend, build-backend]
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Auto merge PR
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh pr merge ${{ github.event.number }} --squash --auto

  create-issue-on-failure:
    name: Create Issue on Failure
    runs-on: ubuntu-latest
    needs: [test-backend, build-backend]
    if: failure()
    
    steps:
    - name: Create issue on failure
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const prNumber = context.payload.pull_request.number;
          const prTitle = context.payload.pull_request.title;
          const prAuthor = context.payload.pull_request.user.login;
          const runId = context.runId;
          
          const issueBody = `
          ## üö® Pull Request CI/CD Failed
          
          **Pull Request:** #${prNumber} - ${prTitle}
          **Author:** @${prAuthor}
          **Workflow Run:** https://github.com/${owner}/${repo}/actions/runs/${runId}
          
          ### What to do:
          1. Check the failed workflow logs
          2. Fix the issues in your branch
          3. Push the fixes to trigger a new CI run
          
          ### Common Issues:
          - **Test failures:** Check test logs and fix failing tests
          - **Lint errors:** Run \`poetry run black apps/ trello_backend/\` and \`poetry run isort apps/ trello_backend/\`
          - **Build failures:** Check Dockerfile and build context
          
          ---
          *This issue was automatically created by the CI/CD pipeline.*
          `;
          
          const issue = await github.rest.issues.create({
            owner,
            repo,
            title: `CI/CD Failed for PR #${prNumber}: ${prTitle}`,
            body: issueBody,
            labels: ['ci-failure', 'bug'],
            assignees: [prAuthor]
          });
          
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: prNumber,
            body: `‚ùå **CI/CD Pipeline Failed**\n\nAn issue has been created: #${issue.data.number}`
          });
